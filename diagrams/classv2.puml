@startuml
interface Visitor {
    + visit(Numeral) : void
    + visit(Variable) : void
    + visit(UnaryOperation) : void
    + visit(BinaryOperation) : void
}

class PrintVisitor implements Visitor{
    + visit(Numeral) : void
    + visit(Variable) : void
    + visit(UnaryOperation) : void
    + visit(BinaryOperation) : void
}

class GetVariablesVisitor implements Visitor{
    + visit(Numeral) : void
    + visit(Variable) : void
    + visit(UnaryOperation) : void
    + visit(BinaryOperation) : void
}

class SetVariableVisitor implements Visitor{
    + visit(Numeral) : void
    + visit(Variable) : void
    + visit(UnaryOperation) : void
    + visit(BinaryOperation) : void
}

Visitable o- Visitor

interface Visitable {
    + accept(Visitor) : void
}

interface Function extends Visitable{
    + solve() : double
}

class UnaryOperation implements Function{
    + getLeftSymbol() : String
    + getRightSymbol() : String
    + getOperand() : Function
    + accept(Visitor visitor) : void
    + solve() : double
}

UnaryOperation *-- UnarySolver

interface UnarySolver{
    + solve(Function) : double
}

class Absolute implements UnarySolver{
    + solve(Function) : double
}

class Root implements UnarySolver{
    + solve(Function) : double
}

class Parentheses implements UnarySolver{
    + solve(Function) : double
}

class BinaryOperation implements Function{
    + accept(Visitor visitor) : void
    + getMiddleSymbol() : String
    + getLeftOperand() : Function
    + getRightOperand() : Function
    + solve() : double
}

BinaryOperation *-- BinarySolver

interface BinarySolver{
    + solve(Function, Function) : double
}

class Addition implements BinarySolver{
    + solve(Function, Function) : double
}

class Subtraction implements BinarySolver{
    + solve(Function, Function) : double
}

class Multiplication implements BinarySolver{
    + solve(Function, Function) : double
}

class Division implements BinarySolver{
    + solve(Function, Function) : double
}

class Exponentiation implements BinarySolver{
    + solve(Function, Function) : double
}

interface Value extends Function{
    + getSymbol() : String
}

class Numeral implements Value{
    -double value
    + solve() : double
    + getSymbol() : String
}

class Variable implements Value{
    - String name
    + setValue(double) : void
    + getSymbol() : String
    + solve() : double
}

@enduml